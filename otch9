Работа с pipe. Часть 1

Для работы с пайпом можно воспользоваться системными вызовами write() для записи и read() для чтения аналогично тому, как это делалось для записи в файл и чтения из файла. Различие в том, что при чтении из файла информация не исчезает, а байт, прочитанный из пайпа удаляется.
Для создание пайпа используется системный вызов pipe(), которому в качестве параметра должен быть передан массив из двух целых чисел. Элемент массива с индексом 0 используется как файловый дескриптор для чтения, а элемент с индексом 1 используется для записи.
Пример:
int fd[2];
pipe(fd);

Таблица файловых дескрипторов наследуется дочерним процессом от родительского, поэтому процесс-ребёнок может отправлять информацию через пайп любому из своих предков, так же, как и читать информацию, отправленную ими в пайп.
Пайп существует до тех пор, пока хотя бы один из его потоков не закрыт. Для этого нужно, чтобы каждый родственный процесс завершил работу, или в процессе работы явно закрыл входной и выходной потоки.

Работа с pipe. Часть 2
Двунаправленная связь между родственными процессами

Для организации двунаправленной связи легче всего использовать два отдельных канала связи - pipe1 и pipe2. Pipe1 будет передавать информацию от процесса-родителя процессу-ребёнку, а pipe2 - в обратном направлении.
Файловые дескрипторы разных пайпов будем хранить в массивах fd1 и fd2.
Для родительского процесса сразу закрываем входной потом pipe1 (close(fd1[0])), а также выходной поток pipe2 (close(fd2[1]))
Для дочернего процесса закрываем выходной потом pipe1  (close(fd1[1]))  и входной поток pipe2 (close(fd2[0]))
После записи информации в pipe родительским процессом выполняется чтение информации из pipe2, при этом дочерний процесс ещё ничего не записал в pipe2. Поэтому родительский процесс при попытке чтения из pipe2 блокируется и ждёт появления информации.
Информация от дочернего процесса в pipe2 появляется после того, как процесс-ребёнок прочитает информацию из pipe1.
Поэтому дочерний процесс заканчивает работу раньше, чем процесс-родитель прочитает информацию от него из pipe2.

Результат выполнения программы pr009m2.out:

Чистаем строку, отправленную процессом-ребёнком ...
Строка, прочитанная дочерним процессом: Информация для дочернего процесса от родителя
Процесс-ребёнок завершил работу
Прочитанная родителем строка: Информация для родительского процесса от ребёнка
Процесс-родитель завершил работу

